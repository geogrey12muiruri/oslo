generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  role      String // Role of the user (e.g., AUDITOR)
  tenantId  String // Tenant ID for isolation
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditProgram {
  id                    String   @id
  name                  String
  auditProgramObjective String?
  status                String   @default("Draft")
  startDate             DateTime
  endDate               DateTime
  tenantId              String // New field
  tenant                Tenant   @relation(fields: [tenantId], references: [id])
  audits                Audit[] // One-to-many relation to audits
  createdBy             String // User ID of creator
  createdAt             DateTime @default(now())
}

model Audit {
  id                     String       @id
  auditProgramId         String
  auditProgram           AuditProgram @relation(fields: [auditProgramId], references: [id], onDelete: Cascade)
  scope                  String
  specificAuditObjective String[]
  methods                String[]
  criteria               String[]
  team                   Json?
  createdAt              DateTime     @default(now())
}

model Tenant {
  id            String            @id @default(uuid())
  name          String            @unique
  domain        String
  email         String?
  type          InstitutionType
  status        InstitutionStatus
  auditPrograms AuditProgram[] // Relation to AuditProgram
  users         User[] // Relation to Users
  createdBy     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum InstitutionType {
  UNIVERSITY
  COLLEGE
  SCHOOL
  INSTITUTE
  OTHER
}

enum InstitutionStatus {
  ACTIVE
  INACTIVE
  PENDING
}
