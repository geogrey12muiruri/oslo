version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./wait-for-services.sh:/docker-entrypoint.d/wait-for-services.sh
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - tenant-service
      - document-service
      - frontend
    networks:
      - ums-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://nginx
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - tenant-service
      - document-service
    networks:
      - ums-network

  tenant-service:
    build:
      context: ./tenant-service
      dockerfile: Dockerfile
    container_name: tenant-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/umsdb?schema=tenant
      - REDIS_URL=redis://redis:6379
      - ACCESS_TOKEN_SECRET=a8f2b91a87c3a6b7e4d8f19ab6c4e5e2f3d6c9b1d2a8e7f6a4b3c9d8e1f2g5h6
      - KAFKA_BROKER=kafka:9092
    ports:
      - "5001:5001"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ums-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/umsdb?schema=auth
      - REDIS_URL=redis://redis:6379
      - EMAIL=greggambugua@gmail.com
      - EMAIL_PASSWORD=wpsy asog klte hpur
      - ACCESS_TOKEN_SECRET=a8f2b91a87c3a6b7e4d8f19ab6c4e5e2f3d6c9b1d2a8e7f6a4b3c9d8e1f2g5h6
      - REFRESH_TOKEN_SECRET=b7d9e3c6f8a5b2c4d1e9f7a6b3c8e2f5g1d4h9a7e3c2b6f5g8d1e4c3b9a7f2g6
      - CLIENT_URL=http://localhost:3000
      - TENANT_SERVICE_URL=http://tenant-service:5001
      - KAFKA_BROKER=kafka:9092
    ports:
      - "5000:5000"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      tenant-service:
        condition: service_started
    networks:
      - ums-network

  document-service:
    build:
      context: ./document-service
      dockerfile: Dockerfile
    container_name: document-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/umsdb?schema=document
      - REDIS_URL=redis://redis:6379
      - ACCESS_TOKEN_SECRET=a8f2b91a87c3a6b7e4d8f19ab6c4e5e2f3d6c9b1d2a8e7f6a4b3c9d8e1f2g5h6
      - KAFKA_BROKER=kafka:9092
    ports:
      - "5002:5002"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ums-network

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - KAFKA_BROKER=kafka:9092
    ports:
      - "5003:5003"
    depends_on:
      - kafka
    networks:
      - ums-network

  audit-service:
    build:
      context: ./audit-service
      dockerfile: Dockerfile
    container_name: audit-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/umsdb?schema=audit
      - ACCESS_TOKEN_SECRET=a8f2b91a87c3a6b7e4d8f19ab6c4e5e2f3d6c9b1d2a8e7f6a4b3c9d8e1f2g5h6
      - PORT=5004
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ums-network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: umsdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d umsdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ums-network
    
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ums-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ums-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 15s
      retries: 20
      start_period: 30s
    networks:
      - ums-network

networks:
  ums-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
